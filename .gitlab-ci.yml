stages: 
  - build
  - test
  - deploy

before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - chmod 400 "$SSH_PRIVATE_KEY"
  - ssh-add "$SSH_PRIVATE_KEY"
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - git config --global user.name "Deploy Runner"
  # Add Known Hosts 
  - cp "$SSH_KNOWN_HOSTS" ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

build-image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose -f docker-compose.yaml build
    - docker-compose -f docker-compose.yaml push

test-api:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose -f docker-compose.yaml up -d
    - docker-compose -f docker-compose.yaml run pp_backend pytest
    - docker-compose -f docker-compose.yaml down

# TODO: Fix deployment; aktuell kennt er das docker-compose file nicht

deploy-prod:
  stage: deploy
  image: docker:latest
  services:
   - docker:dind
  script:
    - echo "This job deploys something from the $CI_COMMIT_BRANCH branch."
    # - alias ssh_pp='ssh -o ProxyCommand="ssh -W %h:%p inf3237@nibelung.hs-worms.de" profplanner@profplanner.projekte.it.hs-worms.de'
    - ssh -o ProxyCommand="ssh -W %h:%p inf3237@nibelung.hs-worms.de" profplanner@profplanner.projekte.it.hs-worms.de "cd /home/profplanner/profplaner_backend && docker compose down && git pull && docker compose up -d"
    #- ssh_pp "docker compose -f docker-compose.yaml pull"
    # - docker compose -f docker-compose.yaml pull
    # - docker compose -f docker-compose.yaml down
    # - docker compose -f docker-compose.yaml up -d
    
    # - ssh $DEPLOY_USER@$DEPLOY_SERVER "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    # - ssh $DEPLOY_USER@$DEPLOY_SERVER "docker-compose -f docker-compose.yaml pull"
    # - ssh $DEPLOY_USER@$DEPLOY_SERVER "docker-compose -f docker-compose.yaml down"
    # - ssh $DEPLOY_USER@$DEPLOY_SERVER "docker-compose -f docker-compose.yaml up -d"
  environment: production
